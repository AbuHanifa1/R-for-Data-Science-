mtcars
mtcars1[] <- lapply(mtcars, as.integer)
mtcars1
mtcars[] <- lapply(mtcars, as.integer)
mtcars
mtcars <- lapply(mt, as.integer)
mtcars
mtcars
mtcars[] <- lapply(mtcars, as.integer)
mtcars
mtcars <- lapply(mt, as.integer)
mtcars
mtcars <- lapply(mtcars, as.integer)
mtcars
#
x <- list(a = 1, b = 2)
x[["b"]] <- NULL
x
str(x)
y <- list(a = 1)
y["b"] <- NULL
str(y)
y["b"] <- list(NULL)
str(y)
x <- c("m", "f", "u", "f", "f", "m", "m")
lookup <- c(m = "Male", f = "Female", u = NA)
lookup[x]
unname(lookup[x])
info <- data.frame(
grade = 3:1,
desc = c("Excellent", "Good", "Poor"),
fail = c(F, F, T)
)
source("/media/abuhanifa/StudyFolder/R Programming/R4DS codes/AdvanceR/Ch2.R")
id <- match(grades, info)
id <- match(grades, info)
id
info[id, ]
id <- match(grades, info$grade)
info[id, ]
grade = 3:1
grade
id <- match(grades, info$grade)
info[id, ]
id <- match(grades, info$desc)
info[id, ]
id <- match(grades, info$grade)
info[id, ]
grade
info <- data.frame(
grade = 3:1,
desc = c("Excellent", "Good", "Poor"),
fail = c(F, F, T)
)
info
rownames(info) <- info$grade
info
info[as.character(grades), ]
df <- data.frame(x = rep(1:3, each = 2), y = 6:1, z = letters[1:6])
df
sample(nrow(df))
# Randomly reorder
df[sample(nrow(df)), ]
# Randomly reorder
df[sample(nrow(df), 3), ]
df[sample(nrow(df), replace = T)]
df[sample(nrow(df), replace = T), ]
df[sample(nrow(df), 6, replace = T), ]
df[sample(nrow(df), 10, replace = T), ]
# Select 3 random rows
df[sample(nrow(df), 30), ]
df[sample(nrow(df), 6, replace = T), ]
df[sample(nrow(df), 6, replace = T), ]
x <- c("b", "c", "a")
order(x)
x[order(x)]
x <- c("b", "c", "a", "b")
order(x) # Returns the integer in which the vector is orderred
x[order(x)]
order(x, decreasing = T) # Returns the integer in which the vector is orderred
x[order(x)]
order(x, decreasing = F) # Returns the integer in which the vector is orderred
x[order(x)]
order(x, decreasing = FALSE) # Returns the integer in which the vector is orderred
x[order(x)]
x <- c("b", "c", "a", "b")
order(x, decreasing = FALSE) # Returns the integer in which the vector is orderred
x[order(x)]
order(x) # Returns the integer in which the vector is orderred
x[order(x)]
df2 <- df[sample(nrow(df)), 3:1]
df2
df2[order(df2$x), ]
df2[, order(names(df2))]
df <- data.frame(x = c(3, 4, 1), y = c(9, 11, 6), z = c(3, 5, 1))
df
rep(1:nrow(df))
rep(1:nrow(df), df$n)
df <- data.frame(x = c(3, 4, 1), y = c(9, 11, 6), n = c(3, 5, 1))
df
rep(1:nrow(df), df$n)
df[rep(1:nrow(df), df$n)]
df[rep(1:nrow(df), df$n), ]
rep(1:nrow(df), df$n)
df <- data.frame(x = c(3, 4, 1), y = c(9, 11, 6), n = c(3, 5, 1))
df
rep(1:nrow(df), df$n)
df[rep(1:nrow(df), df$n), ]
df <- data.frame(x = 1:3, y = 3:1, z = letters(1:3))
df <- data.frame(x = 1:3, y = 3:1, z = letters[1:3])
df
df$z <- NULL
df
# Another way
df <- data.frame(x = 1:3, y = 3:1, z = letters[1:3])
df[c("x", "y")]
df[setdiff(names(df), "z")]
mtcars[mtcars$gear == 5, ]
mtcars[mtcars$gear == 5, ]
mtcars
mtcars[] <- lapply(mtcars, as.integer)
mtcars
mtcars
rm(list = ls)
rm
rm(list = ls())
mtcars
## Selecting rows based on a condition (logical subsetting)
rm(list = ls())
mtcars[mtcars$gear == 5, ]
mtcars[mtcars$gear == 5 & mtcars$cyl == 4, ]
subset(mtcars, gear == 5)
subset(mtcars, gear == 5 & cyl == 4)
x <- sample(10)
x
x <- sample(10) > 4
x
x <- sample(10) < 3
x
which(x)
# To make it again logical/boolean
unwhich <- function(x, n) {
out <- rep_len(FALSE, n)
out[x] <- TRUE
out
}
unwhich(which(x), 10)
x1 <- c(1:10 % 2 ==0)
x1 <- c(1:10 % 2 == 0)
x1 <- c(1:10 %% 2 == 0)
x1
x2 <- which(x1)
x2
y1 <- c(1:10 %% 5 == 0)
y1
y2 <- which(y1)
y2
x1 & y1
intersect(x2, y2)
x1 | y1
union(x1, y1)
union(x2, y2)
x1 & !y1
setdiff(x2, y2)
x1 & !y1
setdiff(x2, y2)
xor(x1, y1)
setdiff(union(x2, y2), intersect(x2, y2))
rm(list = ls())
clearPushBack()
clear()
clear
clean
# Date time
library(lubridate)
y <- 10
f1 <- function(x) {
function() {
x + 10
}
}
f1(1)()
f1(1)
f1(1)()
`+`(1, `*`(2, 3))
mean(, TRUE, x = c(1:10, NA))
mean(c(1:10, NA))
mean(c(1:10, NA), na.rm = TRUE)
f2 <- function(a, b) {
a * 10
}
f2(10, stop("This is an error!"))
library(pryr)
library(pryr)
mean
UseMethod("mean")
UseMethod(mean)
sum
funs <- Filter(is.function, objs)
objs <- mget(ls("package:base"), inherits = TRUE)
funs <- Filter(is.function, objs)
funs
f <- function() {
x <- 1
y <- 2
c(x, y)
}
f()
rm(f)
f()
x <- 2
g <- function() {
y <- 1
c(x, y)
}
g()
rm(x, g)
# Another example
j <- function(x) {
y <- 2
function() {
c(x, y)
}
}
j(1)
k <- j(1)
k()
j(1)
j(1)()
j(j(1))
j(1, j())
j <- function() {
if (!exists("a")) {
a <- 1
} else {
a <- a + 1
}
print(a)
}
j()
j <- function() {
if (!exists("a")) {
a <- 1
} else {
a <- a + 1
}
print(a)
}
j()
# A fresh chart
a <- 2
j <- function() {
if (!exists("a")) {
a <- 1
} else {
a <- a + 1
}
print(a)
}
j()
rm(j)
rm(a, j)
# A fresh chart
j <- function() {
if (!exists("a")) {
a <- 1
} else {
a <- a + 1
}
print(a)
}
j()
rm(a, j)
rm(j)
j()
c <- 10
c(c = c)
